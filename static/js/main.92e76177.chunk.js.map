{"version":3,"sources":["logo.svg","Menu.js","Itemlist.js","Todolist.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Menu","Itemlist","props","newTotalItem","item","map","className","key","value","text","onChange","e","setUpdate","target","icon","faTrash","onClick","trash","duration","easing","Todolist","handleInput","setState","currentItem","Date","now","addItem","preventDefault","newItem","state","newItems","deleteItem","filterItem","filter","console","log","onSubmit","this","type","placeholder","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0JAAAA,EAAOC,QAAU,IAA0B,kC,6KCmB5BC,I,0ECaAC,MA3Bf,SAAkBC,GACd,IACMC,EADUD,EAAME,KACOC,KAAI,SAAAD,GAC7B,OAAQ,yBAAKE,UAAU,WAAWC,IAAKH,EAAKG,KACxC,2BACG,2BAAOC,MAAOJ,EAAKK,KAAMC,SAAU,SAAAC,GAC/BT,EAAMU,UAAUD,EAAEE,OAAOL,MAAMJ,EAAKG,QAEvC,8BACI,kBAAC,IAAD,CAAkBD,UAAU,OAC5BQ,KAAMC,IACNC,QAAS,kBAAId,EAAMe,MAAMb,EAAKG,cAO9C,OACI,6BAEI,kBAAC,IAAD,CAAUW,SAAU,IAAKC,OAAO,eAC/BhB,KCiDEiB,E,kDAxEX,aAAc,IAAD,8BACT,gBASJC,YAAc,SAAAV,GACV,EAAKW,SAAS,CACVC,YAAY,CACRd,KAAKE,EAAEE,OAAOL,MACdD,IAAIiB,KAAKC,UAdR,EAkBbC,QAAU,SAAAf,GACNA,EAAEgB,iBACF,IAAMC,EAAQ,EAAKC,MAAMN,YAEzB,GAAkB,KAAfK,EAAQnB,KAAU,CACnB,IAAOqB,EAAS,GAAD,mBAAK,EAAKD,MAAMzB,MAAhB,CAAqBwB,IACpC,EAAKN,SAAS,CACVlB,KAAK0B,EACLP,YAAY,CACRd,KAAK,GACLF,IAAI,QA5BL,EAiCbwB,WAAY,SAAAxB,GACR,IAAMyB,EAAW,EAAKH,MAAMzB,KAAK6B,QAAO,SAAA7B,GAAI,OAAEA,EAAKG,MAAMA,KACzD,EAAKe,SAAS,CACVlB,KAAK4B,KApCA,EAuCbpB,UAAU,SAACH,EAAKF,GACZ,IAAMqB,EAAQ,EAAKC,MAAMzB,KACzBwB,EAAQvB,KAAI,SAAAD,GACLA,EAAKG,MAAMA,IACVH,EAAKK,KAAKA,GAElByB,QAAQC,IAAIP,GACZ,EAAKN,SAAS,CACVlB,KAAKwB,QA7CT,EAAKC,MAAM,CACPzB,KAAK,GACLmB,YAAY,CACRd,KAAK,GACLF,IAAI,KANH,E,qDAoDT,OACI,yBAAKD,UAAU,cACX,6BACI,0BAAMA,UAAU,aAAa8B,SAAUC,KAAKX,SAC1C,2BAAOY,KAAK,OACZC,YAAY,aACZ/B,MAAO6B,KAAKR,MAAMN,YAAYd,KAC9BC,SAAU2B,KAAKhB,cAEf,4BAAQiB,KAAK,UAAb,SAGN,kBAAC,EAAD,CAAUlC,KAAMiC,KAAKR,MAAMzB,KAC3Ba,MAAOoB,KAAKN,WACZnB,UAAWyB,KAAKzB,iB,GAnET4B,aCYRC,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.92e76177.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import  React from \"react\";\nimport \"./Menu.css\";\n\n\nfunction Menu(){\n    return(\n        <div className=\"menu\">\n         <header>\n             <ul>\n                 <li>Service</li>\n                 <li>Contact</li>\n                 <li>Blog</li>\n                 <li>Todolist</li>\n                 <li>Waether</li>\n             </ul>\n         </header>\n        </div>\n    )\n}\nexport default Menu;","import React from \"react\";\nimport \"./Itemlist.css\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCoffee,faTrash } from '@fortawesome/free-solid-svg-icons'\nimport FlipMove from \"react-flip-move\";\nfunction Itemlist(props){\n    const totalItem=props.item;\n    const newTotalItem=totalItem.map(item=>{\n        return (<div className=\"eachItem\" key={item.key}>\n            <p>\n               <input value={item.text} onChange={e=>{\n                   props.setUpdate(e.target.value,item.key)\n               }}/>\n                <span>\n                    <FontAwesomeIcon  className=\"icon\"\n                    icon={faTrash} \n                    onClick={()=>props.trash(item.key)}\n                    />\n                </span>\n            </p>\n        </div>);\n    });\n\n    return(\n        <div>\n\n            <FlipMove duration={300} easing=\"ease-in-out\">\n            {newTotalItem}\n            </FlipMove>\n        </div>\n    );    \n}\nexport default Itemlist;","import React, { Component } from \"react\";\nimport \"./Todolist.css\";\nimport Itemlist from \"./Itemlist\";\nclass Todolist extends Component{\n    constructor(){\n        super();\n        this.state={\n            item:[],\n            currentItem:{\n                text:\"\",\n                key:\"\"\n            }\n        }\n    }\n    handleInput = e =>{\n        this.setState({\n            currentItem:{\n                text:e.target.value,\n                key:Date.now()\n            }\n        })\n    }\n    addItem = e => {\n        e.preventDefault();\n        const newItem=this.state.currentItem;\n        // let newItems;\n        if(newItem.text!==\"\"){\n          const  newItems=[...this.state.item,newItem];\n          this.setState({\n              item:newItems,\n              currentItem:{\n                  text:\"\",\n                  key:\"\"\n              }\n          });\n        }\n    }\n    deleteItem =key=>{\n        const filterItem=this.state.item.filter(item=>item.key!==key);\n        this.setState({\n            item:filterItem,\n        });\n    }\n    setUpdate=(text,key)=>{\n        const newItem=this.state.item;\n        newItem.map(item=>{\n            if(item.key===key){\n                item.text=text;\n            }\n        console.log(newItem)  \n        this.setState({\n            item:newItem\n        });    \n        });\n    }\n    render(){\n        return(\n            <div className=\"to-do-body\">\n                <div>\n                    <form className=\"to-do-form\" onSubmit={this.addItem}> \n                      <input type=\"text\" \n                      placeholder=\"Enter text\"\n                      value={this.state.currentItem.text}\n                      onChange={this.handleInput}\n                      />\n                      <button type=\"submit\">Add</button>\n                    </form>\n                </div>\n                <Itemlist item={this.state.item} \n                trash={this.deleteItem}\n                setUpdate={this.setUpdate}\n                />\n            </div>\n        );\n    }\n}\nexport default Todolist;","\nimport React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Menu from \"./Menu\";\nimport Todolist from \"./Todolist\";\n\nfunction App() {\n  return (\n    <div>\n      <Todolist />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}